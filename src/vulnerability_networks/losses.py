from typing import Callable

import torch


def rank_loss(preds: torch.Tensor, targets: torch.Tensor, phi_fn: Callable[[torch.Tensor], torch.Tensor]):
    targets = targets.repeat(len(targets)).view(len(targets),-1)
    targets = targets < targets.T

    preds = preds.repeat(len(preds)).view(len(preds),-1)
    preds = preds.T - preds
    loss = phi_fn(preds[targets]).sum()
    return loss

def rank_loss_graph(preds: torch.Tensor, targets: torch.Tensor, graph_ids: torch.Tensor,
                    phi_fn: Callable[[torch.Tensor], torch.Tensor]):
    losses_by_graph = []
    for graph_id in graph_ids.unique():
        targets_graph = targets[graph_ids == graph_id]
        preds_graph = preds[graph_ids == graph_id]
        graph_loss = rank_loss(preds_graph, targets_graph, phi_fn)
        losses_by_graph.append(graph_loss)

    loss = torch.stack(losses_by_graph).mean()
    return loss

